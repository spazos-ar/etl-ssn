import pandas as pd
import json
from datetime import datetime
import os

def load_config():
    config_path = os.path.join('extract', 'config_xls.json')
    with open(config_path, 'r') as f:
        return json.load(f)

def format_number(number, decimal_separator='.'):
    if pd.isna(number):
        return 0.0
    try:
        # Si es un número, convertirlo directamente
        if isinstance(number, (int, float)):
            return float(number)
        
        # Si es string, asegurar que usamos punto como separador decimal para float()
        if isinstance(number, str):
            # Limpiar el string de espacios
            number = number.strip()
            
            # Detectar el separador decimal usado en el número
            has_comma = ',' in number
            has_point = '.' in number
            
            # Si el número usa un separador diferente al configurado, sugerir cambio
            if has_comma and decimal_separator == '.':
                raise ValueError(
                    f"El número '{number}' usa coma como separador decimal, pero está configurado punto (.). "
                    "Por favor, modifique el archivo 'extract/config_xls.json' y configure "
                    "'decimal_separator': ',' para que coincida con el formato del Excel."
                )
            elif has_point and decimal_separator == ',':
                raise ValueError(
                    f"El número '{number}' usa punto como separador decimal, pero está configurado coma (,). "
                    "Por favor, modifique el archivo 'extract/config_xls.json' y configure "
                    "'decimal_separator': '.' para que coincida con el formato del Excel."
                )
            
            # Convertir según el separador configurado
            if decimal_separator == ',':
                return float(number.replace(',', '.'))
            return float(number)
        
        return 0.0
    except ValueError as e:
        print(f"\nError de formato numérico: {str(e)}")
        raise

def format_date(date, date_format='DDMMYYYY'):
    if pd.isna(date):
        return ""
    # Si la fecha es un entero, convertirlo a string
    if isinstance(date, (int, float)):
        date_str = str(int(date))
        if len(date_str) == 8:  # Si ya está en el formato esperado
            return date_str
        # Si es una fecha en formato numérico de Excel, convertirla
        date = pd.Timestamp.fromordinal(datetime(1900, 1, 1).toordinal() + int(date) - 2)
    
    # Convertir fecha al formato especificado
    format_map = {
        'DDMMYYYY': '%d%m%Y',
        'YYYYMMDD': '%Y%m%d',
        'MMDDYYYY': '%m%d%Y'
    }
    return date.strftime(format_map.get(date_format, '%d%m%Y'))

def process_compra(df, decimal_separator='.', date_format='DDMMYYYY'):
    records = []
    for _, row in df.iterrows():
        record = {
            "TIPOOPERACION": "C",
            "TIPOESPECIE": str(row['TIPOESPECIE']),
            "CODIGOESPECIE": str(row['CODIGOESPECIE']),
            "CANTESPECIES": format_number(row['CANTESPECIES'], decimal_separator),
            "CODIGOAFECTACION": str(row['CODIGOAFECTACION']),
            "TIPOVALUACION": str(row['TIPOVALUACION']),
            "FECHAMOVIMIENTO": format_date(row['FECHAMOVIMIENTO'], date_format),
            "PRECIOCOMPRA": format_number(row['PRECIOCOMPRA'], decimal_separator),
            "FECHALIQUIDACION": format_date(row['FECHALIQUIDACION'], date_format)
        }
        records.append(record)
    return records

def process_venta(df, decimal_separator='.', date_format='DDMMYYYY'):
    records = []
    for _, row in df.iterrows():
        record = {
            "TIPOOPERACION": "V",
            "TIPOESPECIE": str(row['TIPOESPECIE']),
            "CODIGOESPECIE": str(row['CODIGOESPECIE']),
            "CANTESPECIES": format_number(row['CANTESPECIES'], decimal_separator),
            "CODIGOAFECTACION": str(row['CODIGOAFECTACION']),
            "TIPOVALUACION": str(row['TIPOVALUACION']),
            "FECHAMOVIMIENTO": format_date(row['FECHAMOVIMIENTO'], date_format),
            "FECHAPASEVT": format_date(row['FECHAPASEVT'], date_format) if 'FECHAPASEVT' in row else "",
            "PRECIOPASEVT": str(row['PRECIOPASEVT']) if 'PRECIOPASEVT' in row else "",
            "FECHALIQUIDACION": format_date(row['FECHALIQUIDACION'], date_format),
            "PRECIOVENTA": format_number(row['PRECIOVENTA'], decimal_separator)
        }
        records.append(record)
    return records

def process_canje(df, decimal_separator='.', date_format='DDMMYYYY'):
    records = []
    for _, row in df.iterrows():
        record = {
            "TIPOOPERACION": "J",
            "TIPOESPECIEA": str(row['TIPOESPECIEA']),
            "CODIGOESPECIEA": str(row['CODIGOESPECIEA']),
            "CANTESPECIESA": format_number(row['CANTESPECIESA'], decimal_separator),
            "CODIGOAFECTACIONA": str(row['CODIGOAFECTACIONA']),
            "TIPOVALUACIONA": str(row['TIPOVALUACIONA']),
            "FECHAPASEVTA": format_date(row['FECHAPASEVTA'], date_format) if 'FECHAPASEVTA' in row else "",
            "PRECIOPASEVTA": str(row['PRECIOPASEVTA']) if 'PRECIOPASEVTA' in row else "",
            "TIPOESPECIEB": str(row['TIPOESPECIEB']),
            "CODIGOESPECIEB": str(row['CODIGOESPECIEB']),
            "CANTESPECIESB": format_number(row['CANTESPECIESB']),
            "CODIGOAFECTACIONB": str(row['CODIGOAFECTACIONB']),
            "TIPOVALUACIONB": str(row['TIPOVALUACIONB']),
            "FECHAPASEVTB": format_date(row['FECHAPASEVTB']) if 'FECHAPASEVTB' in row else "",
            "PRECIOPASEVTB": str(row['PRECIOPASEVTB']) if 'PRECIOPASEVTB' in row else "",
            "FECHAMOVIMIENTO": format_date(row['FECHAMOVIMIENTO']),
            "FECHALIQUIDACION": format_date(row['FECHALIQUIDACION'])
        }
        records.append(record)
    return records

def process_plazo_fijo(df, decimal_separator='.', date_format='DDMMYYYY'):
    records = []
    for _, row in df.iterrows():
        record = {
            "TIPOOPERACION": "P",
            "TIPOPF": str(row['TIPOPF']),
            "BIC": str(row['BIC']),
            "CDF": str(row['CDF']),
            "FECHACONSTITUCION": format_date(row['FECHACONSTITUCION'], date_format),
            "FECHAVENCIMIENTO": format_date(row['FECHAVENCIMIENTO'], date_format),
            "MONEDA": str(row['MONEDA']),
            "VALORNOMINALORIGEN": format_number(row['VALORNOMINALORIGEN'], decimal_separator),
            "VALORNOMINALNACIONAL": format_number(row['VALORNOMINALNACIONAL'], decimal_separator),
            "CODIGOAFECTACION": str(row['CODIGOAFECTACION']),
            "TIPOTASA": str(row['TIPOTASA']),
            "TASA": format_number(row['TASA'], decimal_separator),
            "TITULODEUDA": int(row['TITULODEUDA']),
            "CODIGOTITULO": str(row['CODIGOTITULO'] if not pd.isna(row['CODIGOTITULO']) else "")
        }
        records.append(record)
    return records

def main():
    try:
        # Cargar configuración
        config = load_config()
        
        # Obtener configuración de formato
        decimal_separator = config.get('decimal_separator', '.')
        date_format = config.get('date_format', 'DDMMYYYY')
        
        print(f"\nUsando configuración:")
        print(f"- Código de compañía: {config['company']}")
        print(f"- Separador decimal: {decimal_separator}")
        print(f"- Formato de fecha: {date_format}")
        
        # Leer el archivo Excel
        excel_path = os.path.join('data', 'datos_semanales.xlsx')
    
    try:
        print("Leyendo archivo Excel:", excel_path)
        # Leer cada hoja del Excel sin convertir fechas y sin omitir filas
        compra_df = pd.read_excel(excel_path, sheet_name='Compra', parse_dates=False, skiprows=None)
        venta_df = pd.read_excel(excel_path, sheet_name='Venta', parse_dates=False, skiprows=None)
        canje_df = pd.read_excel(excel_path, sheet_name='Canje', parse_dates=False, skiprows=None)
        plazo_fijo_df = pd.read_excel(excel_path, sheet_name='Plazo-Fijo', parse_dates=False, skiprows=None)
          # Imprimir información detallada de cada DataFrame
        print("\n=== Detalles de registros leídos ===")
        for name, df in [("Compra", compra_df), ("Venta", venta_df), ("Canje", canje_df), ("Plazo Fijo", plazo_fijo_df)]:
            print(f"\n{name}:")
            print(f"- Número de filas: {len(df)}")
            print(f"- Columnas: {', '.join(df.columns)}")
            print("- Primeros registros:")
            print(df.head())
            print("-" * 80)
        
        # Verificar que los DataFrames no estén vacíos
        if compra_df.empty or venta_df.empty or canje_df.empty or plazo_fijo_df.empty:
            raise ValueError("Una o más hojas del Excel están vacías")
        
        # Obtener información de la cabecera
        codigo_compania = config['company']
        cronograma = str(compra_df['CRONOGRAMA'].iloc[0])
          # Procesar cada tipo de operación
        operaciones = []
        
        # Procesar y verificar cada tipo de operación con los formatos configurados
        compras = process_compra(compra_df, decimal_separator, date_format)
        print(f"\nOperaciones de compra procesadas: {len(compras)}")
        operaciones.extend(compras)
        
        ventas = process_venta(venta_df, decimal_separator, date_format)
        print(f"Operaciones de venta procesadas: {len(ventas)}")
        operaciones.extend(ventas)
        
        canjes = process_canje(canje_df, decimal_separator, date_format)
        print(f"Operaciones de canje procesadas: {len(canjes)}")
        operaciones.extend(canjes)
        
        plazos_fijos = process_plazo_fijo(plazo_fijo_df, decimal_separator, date_format)
        print(f"Operaciones de plazo fijo procesadas: {len(plazos_fijos)}")
        operaciones.extend(plazos_fijos)
        
        print(f"\nTotal de operaciones a escribir en JSON: {len(operaciones)}")
        
        # Crear el JSON final
        output_data = {
            "CODIGOCOMPANIA": codigo_compania,
            "TIPOENTREGA": "SEMANAL",
            "CRONOGRAMA": cronograma,
            "OPERACIONES": operaciones
        }
        
        # Extraer año y semana del cronograma (formato YYYY-SS)
        year, week = cronograma.split('-')
        
        # Generar nombre del archivo de salida
        output_filename = f"Semana{week}.json"
        output_path = os.path.join('data', output_filename)
        
        # Guardar el JSON
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(output_data, f, indent=4, ensure_ascii=False)
        
        print(f"\nArchivo JSON generado exitosamente: {output_path}")
          except ValueError as e:
        print("\nError de formato en el archivo Excel:")
        print(str(e))
        return
    except Exception as e:
        print(f"\nError inesperado al procesar el archivo Excel: {str(e)}")
        raise

if __name__ == "__main__":
    main()
